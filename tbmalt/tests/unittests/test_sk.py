import torch
from ase.build import molecule as molecule_database
from tbmalt.common.structures.system import System
from tbmalt.tb.sk import SKT
from tbmalt.io.loadskf import IntegralGenerator
torch.set_default_dtype(torch.float64)
torch.set_printoptions(15)


def test_sk_ase_single(device):
    """Test single molecule SK integral value, HS reference from DFTB+."""
    molecule = molecule_database('CH4')
    molecule = System.from_ase_atoms(molecule)

    sktable = IntegralGenerator.from_dir('../slko/auorg-1-1/', molecule)
    skt = SKT(molecule, sktable)
    assert torch.max(abs(skt.H - h_ch4)) < 1E-14, 'Tolerance check'
    assert torch.max(abs(skt.S - s_ch4)) < 1E-14, 'Tolerance check'

def test_sk_ase_single_d_orb(device):
    """Test single molecule SK integral value, HS reference from DFTB+."""
    numbers = torch.tensor([79, 8])
    positions = torch.tensor([[0., 0., 0.], [1., 1., 0.]])
    molecule = System(numbers, positions)

    sktable = IntegralGenerator.from_dir('../slko/auorg-1-1/', molecule)
    skt = SKT(molecule, sktable)
    assert torch.max(abs(skt.H - h_auo)) < 1E-14, 'Tolerance check'
    # assert torch.max(abs(skt.S - s_ch4)) < 1E-14, 'Tolerance check'


def test_sk_ase_batch(device):
    """Test single molecule SK integral value."""
    molecule = System.from_ase_atoms([molecule_database('CH4'),
                                      molecule_database('H2O'),
                                      molecule_database('H2')])

    sktable = IntegralGenerator.from_dir('../slko/auorg-1-1/', molecule)
    skt = SKT(molecule, sktable)
    assert torch.max(abs(skt.H[1][:h_h2o.shape[0], :h_h2o.shape[1]] - h_h2o)
                     ) < 1E-14, 'Tolerance check'

# def test_hdfsk_ase_single(device):
#     """Test single molecule SK integral value."""
#     molecule = molecule_database('CH4')
#     molecule = System.from_ase_atoms(molecule)

#     sktable = IntegralGenerator.from_dir('../slko/skf.hdf5', molecule, sk_interp='dftbspline', sk_type='h5py')
#     skt = SKT(molecule, sktable)
#     # print('molecule', molecule.positions, skt.HS)
#     # assert abs_delta < 1E-12, 'Tolerance check'
#     # assert same_device, 'Device persistence check'


h_ch4 = torch.tensor([
    [-5.048917654780000E-01, 0.000000000000000E+00, 0.000000000000000E+00,
     0.000000000000000E+00, -3.310339110747502E-01, -3.310339110747502E-01,
     -3.310339110747502E-01, -3.310339110747502E-01],
    [0.000000000000000E+00, -1.943551799163000E-01, 0.000000000000000E+00,
     0.000000000000000E+00, -1.621329527608377E-01, 1.621329527608377E-01,
     1.621329527608377E-01, -1.621329527608377E-01],
    [0.000000000000000E+00, 0.000000000000000E+00, -1.943551799163000E-01,
     0.000000000000000E+00, -1.621329527608377E-01, -1.621329527608377E-01,
     1.621329527608377E-01, 1.621329527608377E-01],
    [0.000000000000000E+00, 0.000000000000000E+00, 0.000000000000000E+00,
     -1.943551799163000E-01, -1.621329527608377E-01, 1.621329527608377E-01,
     -1.621329527608377E-01, 1.621329527608377E-01],
    [-3.310339110747502E-01, -1.621329527608377E-01, -1.621329527608377E-01,
     -1.621329527608377E-01, -2.386005440482000E-01, -7.364358423231271E-02,
     -7.364358423231271E-02, -7.364358423231271E-02],
    [-3.310339110747502E-01, 1.621329527608377E-01, -1.621329527608377E-01,
     1.621329527608377E-01, -7.364358423231271E-02, -2.386005440482000E-01,
     -7.364358423231271E-02, -7.364358423231271E-02],
    [-3.310339110747502E-01, 1.621329527608377E-01, 1.621329527608377E-01,
     -1.621329527608377E-01, -7.364358423231271E-02, -7.364358423231271E-02,
     -2.386005440482000E-01, -7.364358423231271E-02],
    [-3.310339110747502E-01, -1.621329527608377E-01, 1.621329527608377E-01,
     1.621329527608377E-01, -7.364358423231271E-02, -7.364358423231271E-02,
     -7.364358423231271E-02, -2.386005440482000E-01]])

s_ch4 = torch.tensor([
    [1.000000000000000E+00, 0.000000000000000E+00, 0.000000000000000E+00,
     0.000000000000000E+00, 4.286998612221351E-01, 4.286998612221351E-01,
     4.286998612221351E-01, 4.286998612221351E-01],
    [0.000000000000000E+00, 1.000000000000000E+00, 0.000000000000000E+00,
     0.000000000000000E+00, 2.580853601954335E-01, -2.580853601954335E-01,
     -2.580853601954335E-01, 2.580853601954335E-01],
    [0.000000000000000E+00, 0.000000000000000E+00, 1.000000000000000E+00,
     0.000000000000000E+00, 2.580853601954335E-01, 2.580853601954335E-01,
     -2.580853601954335E-01, -2.580853601954335E-01],
    [0.000000000000000E+00, 0.000000000000000E+00, 0.000000000000000E+00,
     1.000000000000000E+00, 2.580853601954335E-01, -2.580853601954335E-01,
     2.580853601954335E-01, -2.580853601954335E-01],
    [4.286998612221351E-01, 2.580853601954335E-01, 2.580853601954335E-01,
     2.580853601954335E-01, 1.000000000000000E+00, 1.126933785177702E-01,
     1.126933785177702E-01, 1.126933785177702E-01],
    [4.286998612221351E-01, -2.580853601954335E-01, 2.580853601954335E-01,
     -2.580853601954335E-01, 1.126933785177702E-01, 1.000000000000000E+00,
     1.126933785177702E-01, 1.126933785177702E-01],
    [4.286998612221351E-01, -2.580853601954335E-01, -2.580853601954335E-01,
     2.580853601954335E-01, 1.126933785177702E-01, 1.126933785177702E-01,
     1.000000000000000E+00, 1.126933785177702E-01],
    [4.286998612221351E-01, 2.580853601954335E-01, -2.580853601954335E-01,
     -2.580853601954335E-01, 1.126933785177702E-01, 1.126933785177702E-01,
     1.126933785177702E-01, 1.000000000000000E+00]])

h_h2o = torch.tensor([
    [-8.788325840774993E-01, 0.000000000000000E+00, 0.000000000000000E+00,
     0.000000000000000E+00, -5.009850265252284E-01, -5.009850265252284E-01],
    [0.000000000000000E+00, -3.321317735293993E-01,  0.000000000000000E+00,
     0.000000000000000E+00, -2.704289178531905E-01, 2.704289178531905E-01],
    [0.000000000000000E+00, 0.000000000000000E+00, -3.321317735293993E-01,
     0.000000000000000E+00, 2.112827011933590E-01, 2.112827011933590E-01],
    [0.000000000000000E+00, 0.000000000000000E+00, 0.000000000000000E+00,
     -3.321317735293993E-01, 0.000000000000000E+00, 0.000000000000000E+00],
    [-5.009850265252284E-01, -2.704289178531905E-01, 2.112827011933590E-01,
     0.000000000000000E+00, -2.386005440481994E-01, -1.120988652530896E-01],
    [-5.009850265252284E-01, 2.704289178531905E-01, 2.112827011933590E-01,
     0.000000000000000E+00, -1.120988652530896E-01, -2.386005440481994E-01]])

s_h2o = torch.tensor([
    [1.000000000000000E+00, 0.000000000000000E+00, 0.000000000000000E+00,
     0.000000000000000E+00, 4.253702443409864E-01, 4.253702443409864E-01],
    [0.000000000000000E+00, 1.000000000000000E+00, 0.000000000000000E+00,
     0.000000000000000E+00, 3.098372121187390E-01, -3.098372121187390E-01],
    [0.000000000000000E+00, 0.000000000000000E+00, 1.000000000000000E+00,
     0.000000000000000E+00, -2.420719042414147E-01, -2.420719042414147E-01],
    [0.000000000000000E+00, 0.000000000000000E+00, 0.000000000000000E+00,
     1.000000000000000E+00, 0.000000000000000E+00, 0.000000000000000E+00],
    [4.253702443409864E-01, 3.098372121187390E-01, -2.420719042414147E-01,
     0.000000000000000E+00, 1.000000000000000E+00, 1.897382512654583E-01],
    [4.253702443409864E-01, -3.098372121187390E-01, -2.420719042414147E-01,
     0.000000000000000E+00, 1.897382512654583E-01, 1.000000000000000E+00]])

h_auo = torch.tensor([
    [-2.107700668744000E-01, 0., 0., 0., 0., 0., 0., 0., 0.,
     -3.766727030358486E-01, 8.942413868442971E-02, 0., 8.942413868442971E-02],
    [0., -2.785941987392000E-02, 0., 0., 0., 0., 0., 0., 0.,
     -3.410451340387461E-01, -4.557024300257728E-02, 0., 9.111984787675188E-02],
    [0., 0., -2.785941987392000E-02, 0., 0., 0., 0., 0., 0., 0., 0.,
     -1.366900908793291E-01, 0.],
    [0., 0., 0., -2.785941987392000E-02, 0., 0., 0., 0., 0.,
     -3.410451340387461E-01, 9.111984787675188E-02, 0., -4.557024300257724E-02],
    [0., 0., 0., 0., -2.531805351853000E-01, 0., 0., 0., 0.,
     -3.713579659355442E-01, 1.802385078011458E-01, 0.000000000000000E+00, 1.802385078011459E-01],
    [0.000000000000000E+00, 0.000000000000000E+00, 0.000000000000000E+00,
     0., 0., -2.531805351853000E-01, 0., 0., 0., 0., 0., -1.607929453863335E-01, 0.],
    [0.000000000000000E+00, 0.000000000000000E+00, 0.000000000000000E+00,
     0., 0., 0., -2.531805351853000E-01, 0., 0., 2.144036215985983E-01,
     -1.040607509973280E-01, 0.,  -1.040607509973280E-01],
    [0.000000000000000E+00, 0.000000000000000E+00, 0.000000000000000E+00,
     0.000000000000000E+00, 0.000000000000000E+00, 0.000000000000000E+00,
     0., -2.531805351853000E-01, 0., 0., 0., -1.607929453863335E-01, 0.],
    [0.000000000000000E+00, 0.000000000000000E+00, 0.000000000000000E+00,
     0.000000000000000E+00, 0.000000000000000E+00, 0.000000000000000E+00,
     0., 0., -2.531805351853000E-01, -8.245803283192112E-17, 1.607929453863335E-01,
     0.000000000000000E+00, -1.607929453863334E-01],
    [-3.766727030358486E-01, -3.410451340387461E-01, 0.000000000000000E+00,
     -3.410451340387461E-01, -3.713579659355442E-01, 0.000000000000000E+00,
     2.144036215985983E-01, 0., -8.245803283192112E-17, -8.788325840775000E-01, 0.,  0., 0.],
    [8.942413868442971E-02, -4.557024300257728E-02, 0.000000000000000E+00,
     9.111984787675188E-02, 1.802385078011458E-01, 0., -1.040607509973280E-01,
     0., 1.607929453863335E-01, 0., -3.321317735294000E-01, 0., 0.],
    [0.000000000000000E+00, 0.000000000000000E+00, -1.366900908793291E-01,
     0.000000000000000E+00, 0.000000000000000E+00, -1.607929453863335E-01,
     0., -1.607929453863335E-01, 0., 0., 0., -3.321317735294000E-01, 0.],
    [8.942413868442971E-02, 9.111984787675188E-02, 0.000000000000000E+00,
     -4.557024300257724E-02, 1.802385078011459E-01, 0., -1.040607509973280E-01,
     0., -1.607929453863334E-01, 0., 0., 0., -3.321317735294000E-01]])
